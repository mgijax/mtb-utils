#parse( "HeaderTemplate.vm" )
#parse( "PerTableVariables.vm" )
$codewriter.setCurrentFilename("$pkg", "${comparatorClass}.java")
package $pkg;

import java.util.Comparator;
$userCode.getBlock( $IMPORT_BLOCK )

/**
 * Comparator class is used to sort the $beanClass objects.
 */
public class $comparatorClass implements Comparator
$userCode.getBlock( $EXTENDS_BLOCK )
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for $comparatorClass.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new $comparatorClass(${coreClass}Manager.$columns.get(0).getConstName(), bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
#foreach( $column in $columns )
#if ( $column.hasCompareTo() )
     *   <li>${managerClass}.ID_$column.getConstName()
#end
#end
     * </ul>
     */
    public $comparatorClass(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ${comparatorClass}.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new $comparatorClass(${coreClass}Manager.$columns.get(0).getConstName(), bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
#foreach( $column in $columns )
     *   <li>${managerClass}.ID_$column.getConstName()
#end
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public $comparatorClass(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        $beanClass b1 = ($beanClass)pObj1;
        $beanClass b2 = ($beanClass)pObj2;
        int iReturn = 0;
        switch(iType)
        {
## I need to add a try catch here??????
#foreach( $column in $columns )
#set ( $getMethod = $strUtil.getGetMethod( $column ) )
#if ( $column.hasCompareTo() )
            case ${managerClass}.ID_$column.getConstName():
                if (b1.$getMethod() == null && b2.$getMethod() != null) {
                    iReturn = -1;
                } else if (b1.$getMethod() == null && b2.$getMethod() == null) {
                    iReturn = 0;
                } else if (b1.$getMethod() != null && b2.$getMethod() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.$getMethod().compareTo(b2.$getMethod());
                }
                break;
#end
#end
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
$userCode.getBlock( $CLASS_BLOCK )
}
