package sql2java.sample;

import java.util.*;

//import sql2java.sample.database.*;

/**
 * Sample application using the database layer generated by sql2java to
 * access the sample schema.
 */
public class SampleMain
{
    public static void main(String[] args) throws Exception
    {
        /**
        // Connection settings
        // (you can pass a DataSource (recommended))
        Manager.getInstance().setJdbcDriver(args[0].trim());
        Manager.getInstance().setJdbcUrl(args[1].trim());
        Manager.getInstance().setJdbcUsername(args[2].trim());
        Manager.getInstance().setJdbcPassword(args.length>3?args[3].trim():"");

        // The managers responsible for storing/loading
        // bean to/from the database
        CustomerManager     cm = CustomerManager.getInstance();
        ManufacturerManager mm = ManufacturerManager.getInstance();
        ProductManager      pm = ProductManager.getInstance();
        DeliveryManager     dm = DeliveryManager.getInstance();
        ShipperManager      sm = ShipperManager.getInstance();

        log("-----------------------------------------------------------------");
        log("*** CREATE a customer bean using the customer manager.");
        log("-----------------------------------------------------------------");
        CustomerBean customer = cm.createCustomerBean();
        customer.setCustomerName("Jack Smith");
        customer.setCustomerAddress(null);// --> testing null
        log(customer.toString());

        log("-----------------------------------------------------------------");
        log("*** SAVE this customer bean to the database.");
        log("-----------------------------------------------------------------");
        cm.save(customer);
        
        log("-----------------------------------------------------------------");
        log("*** After this save, PRINT it");
        log("-----------------------------------------------------------------");
        log(customer.toString());
        log("- (look at its id, see we retrieved the auto generated key)");

        log("-----------------------------------------------------------------");
        log("*** Update the customer, save the changes and print it.");
        log("-----------------------------------------------------------------");
        customer.setCustomerAddress("2 Townsend street... blah blah");
        customer = cm.save(customer);  // --> update
        log(customer.toString());

        log("-----------------------------------------------------------------");
        log("*** DELETE a customer bean given a customer bean TEMPLATE");
        log("-----------------------------------------------------------------");
        CustomerBean customerToDelete = cm.createCustomerBean();
        customerToDelete.setCustomerName("Jack Smith");
        log("*** number of rows deleted: " + cm.deleteUsingTemplate(customerToDelete));

        log("-----------------------------------------------------------------");
        log("*** Work in a transaction");
        log("-----------------------------------------------------------------");

        // start the transaction
        Manager.getInstance().beginTransaction(); // <--- TRANSACTION
        boolean commit = false;

        try {
            String tag = "_stamp"+System.currentTimeMillis(); // since this example may be run several time
            log("    - create a customer");
            CustomerBean cb = cm.createCustomerBean();
            cb.setCustomerName("tutu"+tag);
            cm.save(cb); // <--- in transaction

            log("    - create a manufacturer");
            ManufacturerBean mb = mm.createManufacturerBean();
            mb.setManufacturerName("Sql2JavaManu"+tag);
            mm.save(mb); // <--- in transaction

            log("    - create a product");
            ProductBean pb = pm.createProductBean();
            pb.setProductName("sql2javaProduct");
            pb.setProductPrice(new java.math.BigDecimal(0.0002));
            pb.setManufacturerId(mb.getManufacturerId());
            pm.save(pb); // <--- in transaction

            log("    - create a delivery");
            DeliveryBean db = dm.createDeliveryBean();
            db.setProductId(pb.getProductId());
            db.setCustomerId(cb.getCustomerId());
            db.setDeliveryDate(new Date());
            dm.save(db); // <--- in transaction

            commit = true;// <--- if we reach here we can commit

        } finally {
            Manager.getInstance().endTransaction(commit);  // <--- END OF TRANSACTION: COMMIT OR ROLLBACK IS DONE FOR YOU HERE
            if (commit)
                log("*** transaction succeeded: commit OK");
            else 
                log("*** transaction failed: rollback OK");
        }
        log("***");
        log("-----------------------------------------------------------------");
        log("*** You can also Load all customers...");
        log("*** ...or Load customers given a template");
        log("*** etc...");
        log("-----------------------------------------------------------------");
         */
    }

    private static void log(String msg)
    {
        System.out.println("Sample: "+msg);
    }
}

